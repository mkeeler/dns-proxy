// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: dnsproxy/dns.proto

package dnsproxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DnsClient is the client API for Dns service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DnsClient interface {
	// WatchServers will stream back sets of ready servers as they change such as
	// when new servers are added or older ones removed. A ready server is one that
	// should be considered ready for sending general RPC requests towards that would
	// catalog queries, xDS proxy configurations and similar services.
	Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error)
}

type dnsClient struct {
	cc grpc.ClientConnInterface
}

func NewDnsClient(cc grpc.ClientConnInterface) DnsClient {
	return &dnsClient{cc}
}

func (c *dnsClient) Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error) {
	out := new(ResolveResponse)
	err := c.cc.Invoke(ctx, "/mkeeler.dns.Dns/Resolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DnsServer is the server API for Dns service.
// All implementations should embed UnimplementedDnsServer
// for forward compatibility
type DnsServer interface {
	// WatchServers will stream back sets of ready servers as they change such as
	// when new servers are added or older ones removed. A ready server is one that
	// should be considered ready for sending general RPC requests towards that would
	// catalog queries, xDS proxy configurations and similar services.
	Resolve(context.Context, *ResolveRequest) (*ResolveResponse, error)
}

// UnimplementedDnsServer should be embedded to have forward compatible implementations.
type UnimplementedDnsServer struct {
}

func (UnimplementedDnsServer) Resolve(context.Context, *ResolveRequest) (*ResolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}

// UnsafeDnsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DnsServer will
// result in compilation errors.
type UnsafeDnsServer interface {
	mustEmbedUnimplementedDnsServer()
}

func RegisterDnsServer(s grpc.ServiceRegistrar, srv DnsServer) {
	s.RegisterService(&Dns_ServiceDesc, srv)
}

func _Dns_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mkeeler.dns.Dns/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServer).Resolve(ctx, req.(*ResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dns_ServiceDesc is the grpc.ServiceDesc for Dns service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dns_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mkeeler.dns.Dns",
	HandlerType: (*DnsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resolve",
			Handler:    _Dns_Resolve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dnsproxy/dns.proto",
}
